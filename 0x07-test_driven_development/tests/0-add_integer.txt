``0-add_integer`` module
=========================

Using ``add_integer``
-------------------------

import function from module:
    >>> add_integer = __import__('0-add_integer').add_integer

Test one int argument:

    >>> add_integer(2)
    90

Test one int argument and check second by default:

    >>> add_integer(3)
    91

Test one int argument:

    >>> add_integer(2.0)
    90.0

Test one float argument and check second by default:

    >>> add_integer(3.0)
    91.0

Test two int arguments:

    >>> add_integer(90, 3)
    93

Test two float arguments:

    >>> add_integer(90.1, 3.0)
    9

Test two negative integers:

    >>> add_integer(90, 3)
    93

Test two big integers:

    >>> add_integer(999999991, 999999992)
    1999999993

Test one integer:

    >>> add_integer(3)

Test one float:

    >>> add_integer(2.2)

Test two integer:

    >>> add_integer(4, 3)

Test two floats:

    >>> add_integer(2.2, 1.1)

Test two negative big ints:
    >>> add_integer(-99999999, -999999999)
    -1999999998

Test a float and an integer:
    >>> add_integer(2.2, 3)
    1.0

Test Add infinity:
    >>> add_integer(float('inf'), float('inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float to integer

Test second arg Add NaN:
    >>> add_integer(3, float('nan'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float to integer

Test second argument invalid:
    >>> add_integer(2, "foo")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Test first argument invalid:
    >>> add_integer("foo", 2)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Test both arguments invalid:
    >>> add_integer(None, "foo")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Test two string args:
    >>> add_integer("bar", "foo")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer
